// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/clientstream/clientstream.proto

package clientstream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d20c10fdb92933, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type Response struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_75d20c10fdb92933, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Response)(nil), "Response")
}

func init() {
	proto.RegisterFile("proto/clientstream/clientstream.proto", fileDescriptor_75d20c10fdb92933)
}

var fileDescriptor_75d20c10fdb92933 = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x29, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x45, 0xe1,
	0xe8, 0x81, 0xe5, 0x95, 0xa4, 0xb9, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04,
	0xb8, 0x98, 0xf3, 0x4a, 0x73, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x40, 0x4c, 0x25, 0x15,
	0x2e, 0x8e, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4,
	0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0xb0, 0x0a, 0xce, 0x20, 0x18, 0xd7, 0xc8, 0x80, 0x8b, 0xc7, 0x19,
	0x6c, 0x70, 0x30, 0xd8, 0x60, 0x21, 0x05, 0x2e, 0x56, 0xf7, 0xa2, 0xd4, 0xd4, 0x12, 0x21, 0x0e,
	0x3d, 0xa8, 0xd1, 0x52, 0x9c, 0x7a, 0x30, 0x73, 0x94, 0x18, 0x34, 0x18, 0x93, 0xd8, 0xc0, 0x76,
	0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x18, 0xa4, 0x99, 0x71, 0xa4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientStreamClient is the client API for ClientStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientStreamClient interface {
	Greet(ctx context.Context, opts ...grpc.CallOption) (ClientStream_GreetClient, error)
}

type clientStreamClient struct {
	cc *grpc.ClientConn
}

func NewClientStreamClient(cc *grpc.ClientConn) ClientStreamClient {
	return &clientStreamClient{cc}
}

func (c *clientStreamClient) Greet(ctx context.Context, opts ...grpc.CallOption) (ClientStream_GreetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClientStream_serviceDesc.Streams[0], "/ClientStream/Greet", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientStreamGreetClient{stream}
	return x, nil
}

type ClientStream_GreetClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type clientStreamGreetClient struct {
	grpc.ClientStream
}

func (x *clientStreamGreetClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientStreamGreetClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamServer is the server API for ClientStream service.
type ClientStreamServer interface {
	Greet(ClientStream_GreetServer) error
}

func RegisterClientStreamServer(s *grpc.Server, srv ClientStreamServer) {
	s.RegisterService(&_ClientStream_serviceDesc, srv)
}

func _ClientStream_Greet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamServer).Greet(&clientStreamGreetServer{stream})
}

type ClientStream_GreetServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type clientStreamGreetServer struct {
	grpc.ServerStream
}

func (x *clientStreamGreetServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientStreamGreetServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClientStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ClientStream",
	HandlerType: (*ClientStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Greet",
			Handler:       _ClientStream_Greet_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/clientstream/clientstream.proto",
}
