// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/serverstream/serverstream.proto

package serverstream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Min                  int32    `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  int32    `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e9f74dfa56a963c, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetMin() int32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Request) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type Response struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e9f74dfa56a963c, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Response)(nil), "Response")
}

func init() {
	proto.RegisterFile("proto/serverstream/serverstream.proto", fileDescriptor_0e9f74dfa56a963c)
}

var fileDescriptor_0e9f74dfa56a963c = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x2a, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x45, 0xe1,
	0xe8, 0x81, 0xe5, 0x95, 0x74, 0xb9, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04,
	0xb8, 0x98, 0x73, 0x33, 0xf3, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x40, 0x4c, 0xb0, 0x48,
	0x62, 0x85, 0x04, 0x13, 0x54, 0x24, 0xb1, 0x42, 0x49, 0x85, 0x8b, 0x23, 0x28, 0xb5, 0xb8, 0x20,
	0x3f, 0xaf, 0x38, 0x55, 0x48, 0x82, 0x8b, 0x3d, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x15, 0xac,
	0x87, 0x33, 0x08, 0xc6, 0x35, 0x32, 0xe0, 0xe2, 0x09, 0x06, 0x5b, 0x15, 0x0c, 0xb6, 0x4a, 0x48,
	0x81, 0x8b, 0xd5, 0xbd, 0x28, 0x35, 0xb5, 0x44, 0x88, 0x43, 0x0f, 0x6a, 0x99, 0x14, 0xa7, 0x1e,
	0xcc, 0x1c, 0x25, 0x06, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0x6b, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x8c, 0xae, 0x9c, 0xbb, 0xb6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServerStreamClient is the client API for ServerStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerStreamClient interface {
	Greet(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServerStream_GreetClient, error)
}

type serverStreamClient struct {
	cc *grpc.ClientConn
}

func NewServerStreamClient(cc *grpc.ClientConn) ServerStreamClient {
	return &serverStreamClient{cc}
}

func (c *serverStreamClient) Greet(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServerStream_GreetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServerStream_serviceDesc.Streams[0], "/ServerStream/Greet", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamGreetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStream_GreetClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type serverStreamGreetClient struct {
	grpc.ClientStream
}

func (x *serverStreamGreetClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamServer is the server API for ServerStream service.
type ServerStreamServer interface {
	Greet(*Request, ServerStream_GreetServer) error
}

func RegisterServerStreamServer(s *grpc.Server, srv ServerStreamServer) {
	s.RegisterService(&_ServerStream_serviceDesc, srv)
}

func _ServerStream_Greet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamServer).Greet(m, &serverStreamGreetServer{stream})
}

type ServerStream_GreetServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type serverStreamGreetServer struct {
	grpc.ServerStream
}

func (x *serverStreamGreetServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _ServerStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ServerStream",
	HandlerType: (*ServerStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Greet",
			Handler:       _ServerStream_Greet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/serverstream/serverstream.proto",
}
